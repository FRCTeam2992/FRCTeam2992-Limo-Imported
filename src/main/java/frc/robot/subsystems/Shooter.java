// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.DutyCycleOut;
import com.ctre.phoenix6.controls.Follower;
import com.ctre.phoenix6.controls.VelocityDutyCycle;
import com.ctre.phoenix6.hardware.TalonFX;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix6.signals.InvertedValue;
import com.ctre.phoenix6.signals.NeutralModeValue;

/**
 *
 */
public class Shooter extends SubsystemBase {
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  private double mainShooterSetRPM = Constants.defaultMainShooterSpeed;
  private double secondaryShooterSetRPM = Constants.defaultSecondaryShooterSpeed;
  private boolean shooterCommanded = false;

  private int dashboardCounter = 0;

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private TalonFX mainShooterLead;
  private TalonFX mainShooterFollow;
  private TalonFX secondaryShooterLead;
  private TalonFXConfiguration mainShooterLeadConfigs;
  private TalonFXConfiguration mainShooterFollowConfigs;
  private TalonFXConfiguration secondaryShooterLeadConfigs;
  private DutyCycleOut percentOutputRequest;
  private VelocityDutyCycle velocityRequest;
  // private WPI_VictorSPX secondaryShooterFollow;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /**
  *
  */
  public Shooter() {
    mainShooterLead = new TalonFX(30);
    mainShooterLeadConfigs = new TalonFXConfiguration();
    mainShooterLeadConfigs.MotorOutput.Inverted = InvertedValue.Clockwise_Positive;
    mainShooterLeadConfigs.MotorOutput.NeutralMode = NeutralModeValue.Coast;
    mainShooterLeadConfigs.CurrentLimits.SupplyCurrentLimitEnable = true;
    mainShooterLeadConfigs.CurrentLimits.SupplyCurrentLimit = 40.0;
    mainShooterLeadConfigs.CurrentLimits.SupplyCurrentThreshold = 60.0;
    mainShooterLeadConfigs.CurrentLimits.SupplyTimeThreshold = 0.1;
    mainShooterLeadConfigs.Slot0.kP = Constants.shooterPIDMainP;
    mainShooterLeadConfigs.Slot0.kI = Constants.shooterPIDMainI;
    mainShooterLeadConfigs.Slot0.kD = Constants.shooterPIDMainD;
    mainShooterLeadConfigs.Slot0.kV = Constants.shooterPIDMainF;
    mainShooterLead.getConfigurator().apply(mainShooterLeadConfigs);
    addChild("mainShooterLead", mainShooterLead);

    mainShooterFollow = new TalonFX(31);
    mainShooterFollowConfigs = new TalonFXConfiguration();
    // mainShooterFollowConfigs.MotorOutput.Inverted = InvertedValue.CounterClockwise_Positive;
    mainShooterFollowConfigs.MotorOutput.NeutralMode = NeutralModeValue.Coast;
    mainShooterFollowConfigs.CurrentLimits.SupplyCurrentLimitEnable = true;
    mainShooterFollowConfigs.CurrentLimits.SupplyCurrentLimit = 40.0;
    mainShooterFollowConfigs.CurrentLimits.SupplyCurrentThreshold = 60.0;
    mainShooterFollowConfigs.CurrentLimits.SupplyTimeThreshold = 0.1;
    mainShooterFollowConfigs.Slot0.kP = Constants.shooterPIDSecondaryP;
    mainShooterFollowConfigs.Slot0.kI = Constants.shooterPIDSecondaryI;
    mainShooterFollowConfigs.Slot0.kD = Constants.shooterPIDSecondaryD;
    mainShooterFollowConfigs.Slot0.kV = Constants.shooterPIDSecondaryF;
    mainShooterFollow.getConfigurator().apply(mainShooterFollowConfigs);
    mainShooterFollow.setControl(
      new Follower(
        mainShooterLead.getDeviceID(), true));
    addChild("mainShooterFollow", mainShooterFollow);

    secondaryShooterLead = new TalonFX(32);
    secondaryShooterLeadConfigs = new TalonFXConfiguration();
    secondaryShooterLeadConfigs.MotorOutput.NeutralMode = NeutralModeValue.Coast;
    secondaryShooterLeadConfigs.MotorOutput.Inverted = InvertedValue.Clockwise_Positive;
    secondaryShooterLeadConfigs.CurrentLimits.SupplyCurrentLimitEnable = true;
    secondaryShooterLeadConfigs.CurrentLimits.SupplyCurrentLimit = 40.0;
    secondaryShooterLeadConfigs.CurrentLimits.SupplyCurrentThreshold = 60.0;
    secondaryShooterLeadConfigs.CurrentLimits.SupplyTimeThreshold = 0.25;
    secondaryShooterLead.getConfigurator().apply(secondaryShooterLeadConfigs);
    addChild("secondaryShooterLead", secondaryShooterLead);
  }

  @Override
  public void periodic() {
    // Display the Shooter Set Speed and Current RPM
    if (++dashboardCounter >= 5) {
      SmartDashboard.putNumber("Main Shooter Set Speed", mainShooterSetRPM);
      SmartDashboard.putNumber("Main Shooter Current RPM", getMainShooterRPM());

      SmartDashboard.putNumber("Secondary Shooter Set Speed", secondaryShooterSetRPM);
      SmartDashboard.putNumber("Secondary Shooter Current RPM", getSecondaryShooterRPM());

      SmartDashboard.putBoolean("Main Shooter At Speed", atMainShooterRPM());
      SmartDashboard.putBoolean("Secondary Shooter At Speed", atSecondaryShooterRPM());
      SmartDashboard.putBoolean("Shooters at Speed", atShooterRPM());

      dashboardCounter = 0;
    }
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

  }

  public void setMainShooterPower(double speed) {
    mainShooterLead.setControl(percentOutputRequest.withOutput(speed));
  }

  public void setSecondaryShooterPower(double speed) {
    secondaryShooterLead.setControl(percentOutputRequest.withOutput(speed));
  }

  public void setMainShooterToTargetRPM() {
    double speed = mainShooterSetRPM / (60.0 * 0.75);
    setMainShooterRawVelocity(speed);
  }

  private void setMainShooterRawVelocity(double velocity) {
    mainShooterLead.setControl(velocityRequest.withVelocity(velocity));
  }

  public void setSecondaryShooterToTargetRPM() {
    double speed = secondaryShooterSetRPM / 60.0;
    setSecondaryShooterRawVelocity(speed);
  }

  private void setSecondaryShooterRawVelocity(double velocity) {
    secondaryShooterLead.setControl(velocityRequest.withVelocity(velocity));
  }

  public double getMainShooterRPM() {
    return mainShooterLead.getVelocity().getValue() * 60.0 * 0.75;
  }

  public double getSecondaryShooterRPM() {
    return secondaryShooterLead.getVelocity().getValue() / 60.0;
  }

  public double getMainShooterTargetRPM() {
    return mainShooterSetRPM;
  }

  public void setMainShooterTargetRPM(double mainShooterSetSpeed) {
    this.mainShooterSetRPM = mainShooterSetSpeed;
  }

  public double getSecondaryShooterTargetRPM() {
    return secondaryShooterSetRPM;
  }

  public void setSecondaryShooterTargetRPM(double secondaryShooterSetSpeed) {
    this.secondaryShooterSetRPM = secondaryShooterSetSpeed;
  }

  public boolean atMainShooterRPM() {
    return (Math.abs(getMainShooterTargetRPM() - getMainShooterRPM()) < 200.0);
  }

  public boolean atSecondaryShooterRPM() {
    return (Math.abs(getSecondaryShooterTargetRPM() - getSecondaryShooterRPM()) < 150.0);
  }

  public boolean atShooterRPM() {
    return (atMainShooterRPM() && atSecondaryShooterRPM());
  }

  public boolean isShooterCommanded() {
    return shooterCommanded;
  }

  public void setShooterCommanded(boolean shooterCommanded) {
    this.shooterCommanded = shooterCommanded;
  }

  public void reset() {
    setShooterCommanded(false);
  }
  
}
