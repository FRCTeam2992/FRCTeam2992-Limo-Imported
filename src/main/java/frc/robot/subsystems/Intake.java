// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.DutyCycleOut;
import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.InvertedValue;
import com.ctre.phoenix6.signals.NeutralModeValue;

/**
 *
 */
public class Intake extends SubsystemBase {


    private TalonFX intakeMotor;
    private TalonFXConfiguration intakeMotorConfigs;
    private DutyCycleOut controlRequest;
   
    private boolean intakeDeployed = false;

    // private int dashboardCounter = 0;

    private boolean intakeCommanded = false;                 // Did driver request intake running
    private double speedCommanded = 0;                       // Requested speed

    public Intake() {

        intakeMotor = new TalonFX(21);
        intakeMotorConfigs = new TalonFXConfiguration();
        intakeMotorConfigs.MotorOutput.Inverted = InvertedValue.CounterClockwise_Positive;
        intakeMotorConfigs.MotorOutput.NeutralMode = NeutralModeValue.Brake;

        // FIXME: What does this do, and how to replicate in Phoenix 6 via StatusSignal
        // intakeMotor.setStatusFramePeriod(Status_1_General, 255);
        // intakeMotor.setStatusFramePeriod(Status_2_Feedback0, 254);
        // intakeMotor.setStatusFramePeriod(Status_3_Quadrature, 253);
        // intakeMotor.setStatusFramePeriod(Status_4_AinTempVbat, 252);
        // intakeMotor.setStatusFramePeriod(Status_8_PulseWidth, 251);
        // intakeMotor.setStatusFramePeriod(Status_10_Targets, 250);
        // intakeMotor.setStatusFramePeriod(Status_12_Feedback1, 249);
        // intakeMotor.setStatusFramePeriod(Status_13_Base_PIDF0, 248);
        // intakeMotor.setStatusFramePeriod(Status_14_Turn_PIDF1, 247);
        // intakeMotor.setStatusFramePeriod(Status_21_FeedbackIntegrated, 246);

        intakeMotor.getConfigurator().apply(intakeMotorConfigs);

        controlRequest = new DutyCycleOut(0.0);
        addChild("Intake Motor", intakeMotor);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        // if (++dashboardCounter >= 5) {
        //     // SmartDashboard.putNumber("Intake Motor Speed", speedCommanded);
        //     // SmartDashboard.putBoolean("Intake Commanded", intakeCommanded);
        //     dashboardCounter = 0;
        // }

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    public boolean getIntakePosition() {
        return intakeDeployed;
    }

    public void setIntakeSpeed(double speed) {
        intakeMotor.setControl(controlRequest.withOutput(speed));
    }

    public void setIntakeCommanded (boolean commanded) {
        intakeCommanded = commanded;
    }

    public boolean getIntakeCommanded () {
        return intakeCommanded;
    }

    public double getSpeedCommanded() {
        return speedCommanded;
    }

    public void setSpeedCommanded(double speedCommanded) {
        this.speedCommanded = speedCommanded;
    }

    public void reset() {
        setIntakeCommanded(false);
        setSpeedCommanded(0.0);
    }
}
